version = 3.7.7
runner.dialect = scala213

trailingCommas = multiple

# wrapping
maxColumn = 110
comments {
  wrap = standalone
  wrapSingleLineMlcAsSlc = true
}

docstrings {
  style = SpaceAsterisk
  forceBlankLineBefore = false
  blankFirstLine = yes
  wrapMaxColumn = 80
  removeEmpty = true
  oneline = fold
}

indent {
  main = 2
  callSite = 2
  defnSite = 2
  extendSite = 2
  withSiteRelativeToExtends = 2
}

align {
  preset = most
  multiline = true
  openParenCallSite = false
  openParenCtrlSite = false
  openParenDefnSite = true
  arrowEnumeratorGenerator = true
  stripMargin = true
  tokens = [
    {
      code = "extends"
      owner = "Template|Defn\\.EnumCase"
    },
    {
      code = "=>"
      owner = "Case"
    },
    {
      code = "//"
    },
    {
      code = "{"
      owner = "Template"
    },
    {
      code = "}"
      owner = "Template"
    },
    {
      code = "%"
      owner = "Term.ApplyInfix"
    },
    {
      code = "%%"
      owner = "Term.ApplyInfix"
    },
    {
      code = "%%%"
      owner = "Term.ApplyInfix"
    },
    {
      code = "->"
      owner = "Term.ApplyInfix"
    },
    {
      code = ":="
      owner = "Term.ApplyInfix"
    },
    {
      code = "~>"
      owner = "Term.ApplyInfix"
    },
    {
      code = "<-"
      owner = "Enumerator.Generator"
    },
    {
      code = "="
      owner = "(Enumerator.Val|Defn.(Va(l|r)|GivenAlias|Def|Type))"
    }
  ]
}
# Align | in default multiline strings setup
assumeStandardLibraryStripMargin = true

newlines {
  beforeMultiline = fold
  alwaysBeforeElseAfterCurlyIf = false
  beforeCurlyLambdaParams = never
  afterCurlyLambdaParams = squash
  implicitParamListModifierPrefer = after
  sometimesBeforeColonInMethodReturnType = false
}
# other newline options
optIn.breakChainOnFirstMethodDot = true
includeCurlyBraceInSelectChains = true
includeNoParensInSelectChains = true
optIn.breaksInsideChains = false
danglingParentheses.defnSite = false
danglingParentheses.callSite = true
importSelectors = singleLine

spaces {
  beforeContextBoundColon = IfMultipleBounds
  inInterpolatedStringCurlyBraces = false
  afterKeywordBeforeParen = true
  inImportCurlyBraces = false
  afterSymbolicDefs = true
  inParentheses = false
  inByNameTypes = true
}

rewrite {
  rules = [
    RedundantBraces,
    RedundantParens,
    SortModifiers,
    Imports,
  ]
  redundantBraces {
    stringInterpolation = true
    ifElseExpressions = true
  }
  redundantParens.infixSide = some
  imports.sort = original
  trailingCommas.style = multiple
  trailingCommas.allowFolding = true
}

rewriteTokens = {
  "⇒": "=>"
  "→": "->"
  "←": "<-"
}
